####################################################################################################
# @author David Kirwan https://github.com/davidkirwan
# @description Ruby Rake script to handle launching of job workers.
#
# @usage 'rake -T' or 'rake --tasks' to get a list of tasks
#
# @date 2015-03-02
####################################################################################################
### => Import libs
require 'fileutils'
require 'logger'
require 'redis'
require File.dirname(__FILE__) + "/lib/common.rb"

# Include lib/common/tasks
include Common::Tasks

# Setup variables
begin
  @log = Logger.new(STDOUT)
  @log.level = Logger::DEBUG
  @date = DateString.now # Common::Tasks::DateString#now
  @data = ConfigReader.load('resource/config.yaml')
rescue Exception => e
  raise e
end

# Default Task
task :default => 'worker:start'

namespace :worker do

  desc "Start the job worker"
  task :start do
    @log.debug "Task worker:start starting: #{DateString.now}"
    tasktimer = Time.now.to_i

    # Configure the queue to subscribe to
    queue = ENV['queue'] ||= 'dxspider'

    redis = Redis.new(:host => "192.168.1.9", :port => 6379) 
    trap(:INT) { puts; exit }

    begin
      redis.subscribe(queue) do |on|
        on.subscribe do |channel, subscriptions|
          puts "Subscribed to ##{channel} (#{subscriptions} subscriptions)"
        end

        on.message do |channel, message|
          puts "##{channel}: #{message}"
          #dxspider: DX de W4IMD:     50145.0  W4ILT        EM84AB<ES>EL09SN               0248Z EM84
          data = parse(message)

          puts data

          redis.unsubscribe if message == "exit"
        end

        on.unsubscribe do |channel, subscriptions|
          puts "Unsubscribed from ##{channel} (#{subscriptions} subscriptions)"
        end
      end
    rescue Redis::BaseConnectionError => error
      puts "#{error}, retrying in 1s"
      sleep 1
      retry
    end

    @log.debug "Task worker:start complete: #{DateString.now} duration: #{Time.now.to_i - tasktimer} seconds"
  end
end


def parse(message)
  begin
    data = message.delete("\a").split(/\s+/)
    data.delete_at(0) # Delete "DX"
    data.delete_at(0) # delete "de"
    #puts data.inspect
    
    spotter = data[0].downcase.delete(":")
    dx_freq = data[1]
    dx = data[2].downcase

    if(data[data.size-1] =~ /\d+Z/) == 0
      time = data[data.size-1]

      if(data.size > 4)
        msg = ""
        data[3..data.size-2].each {|i| msg<< i + " "}
      else
        msg = ""
      end
    else
      time = data[data.size-2]

      if(data.size > 4)
        msg = ""
        data[3..data.size-3].each {|i| msg<< i + " "}
      else
        msg = ""
      end
    end


  rescue ArgumentError => e
    return {:spotter=>nil, :freq=>nil, :dx=>nil, :msg=>nil, :time=>nil, :error=>e, :cc=>nil}
  end

  {:spotter=>spotter, :freq=>dx_freq, :dx=>dx, :msg=>msg.strip, :time=>time, :cc=>parse_cc(dx)}
end


def parse_cc(dx)
  tag = dx[0..2]
  
  @data["dxcc"].each do |k,v|
    v.each do |i|
      next if tag[0] != i[0][0]
      return k
    end
  end

  ""
end  
